#!/bin/bash
set -e

# 設定ファイルから、各種設定値を取得する。
# 設定ファイルとしては、下記の優先順で使用する。
# .file-numbering.yml
# .file-numbering.json
# 第1引数として、ディレクトリを指定する。（デフォルトはカレントディレクトリ）
# "-q"オプションで、適用するjq表現を指定できる。
# TODO ディレクトリを上に遡って設定ファイルをマージする。

# 実行例
# fn-config
# fn-config sample
# fn-config -q .digit
# fn-config -q .digit sample

# オプションの解析
jq_expression="."
while getopts q: opt; do
  case $opt in
    q) jq_expression="$OPTARG";;
    *) exit 1;;
  esac
done
shift $((OPTIND - 1))

# 引数の解析
# 末尾のスラッシュは除去する。
directory="${1:-.}"
directory="${directory%/}"

# 設定ファイルをマージして読み取る。（カレントディレクトリのファイル、デフォルトのファイルの順で優先して読み取る）
config_file_default="$(dirname "$0")/../.file-numbering.json"
config_file_current_yml="${directory}/.file-numbering.yml"
config_file_current_json="${directory}/.file-numbering.json"
if [ -f "$config_file_current_yml" ]; then
  # yqでは使えない表現があるため、yqでJSONに変換した後にjqを使う。
  jq -sr "add | $jq_expression" "$config_file_default" <(yq -o json . "$config_file_current_yml")
elif [ -f "$config_file_current_json" ]; then
  jq -sr "add | $jq_expression" "$config_file_default" "$config_file_current_json"
else
  jq -r "$jq_expression" "$config_file_default"
fi
